let set_range = n => new Set(Array.from(new Array(n).keys()));

// move: moves a pile of shapes from the source color to the target color
const move = (n, a,b,c) => n ? move(n-1,a,c,b).concat([[a,b]]).concat(move(n-1,c,b,a)):[];
// moves_p: adds to the array returned by moves the index of the poligon wich color has been changed
function move_p(n,a,b,v) {
    let sticks = set_range(3);
    sticks.delete(a);sticks.delete(b);
    let c =Array.from(sticks)[0];
    let return_list =[];
    let move_s = move(n,a,b,c);
    for (let i in move_s){
        let  e = v.lastIndexOf(move_s[i][0]);
        v[e]=move_s[i][1];
        return_list.push([move_s[i][0],move_s[i][1],v.length-1-e]);
    }
    return return_list
}
// hanoiMoves: starts from the final stage searching where to put the next disk from the bottom of the pile
function hanoiMoves(vitamin, tmp_v, size) {
    let return_values = new Array(0);
    for(let i=size-1;i>-1;i--){
        let t =size-1-i;
        if(vitamin[t]==tmp_v[t])continue;
        if (i>0)
            return_values = return_values.concat(
                move_p(i,tmp_v[t],3-vitamin[t]-tmp_v[t],tmp_v));
        return_values.push([tmp_v[t], vitamin[t], i]);
        tmp_v[t] = vitamin[t];
    }
    return return_values
}
//reverseMovesAddNames: changes the order and add the proper names to the array of the moves
function reverseMovesAddNames(l,names,s_vitamins) {
    let result = [];
    for(let i= l.length-1; i>-1;i--){
        let item = l[i];
        let tmp = [names[names.length-1 - item[2]], s_vitamins[item[1]], s_vitamins[item[0]]];
        result.push(tmp);
    }
    return result
}
/* makeAllWhite: return the array of moves needed to set all of the colors
   of the shapes to white accordingly with the Maxi-Maxi Principle. */
function makeAllWhite(Vitamin_String) {
    let colors = "BGW";
    let tmp_v = [], names_v = [];
    let Vitamin_String_split = Vitamin_String.split(" ");
    for (let i in Vitamin_String_split){
        let item = Vitamin_String_split[i];
        let value = parseInt(item.substr(0,item.length-1));
        let color = item[item.length-1];
        tmp_v.push(colors.indexOf(color));
        names_v.push(value)
    }
    let size = tmp_v.length;
    let move_list = hanoiMoves(tmp_v, new Array(size).fill(2), size);
    return reverseMovesAddNames(move_list, names_v, colors)
}
/* makeAllWhiteStatus: take as input the start status and the moves and return and array
                       with the list of status generated by the moves */
function makeAllWhiteStatus(s_vitamins,list_moves) {
    let result = [s_vitamins];
    for (let i in list_moves) {
        let item = list_moves[i];
        let pos = s_vitamins.indexOf(item[0]) + String(item[0]).length;
        s_vitamins= s_vitamins.substr(0,pos)+item[2]+s_vitamins.substr(pos+1,s_vitamins.length);
        result.push(s_vitamins)
    }
    return result
}

module.exports = {
    makeAllWhite:makeAllWhite,
    makeAllWhiteStatus:makeAllWhiteStatus
};

